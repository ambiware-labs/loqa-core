name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version label for snapshot builds (optional)"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.x"

      - name: Set up TinyGo
        uses: acifani/setup-tinygo@v2
        with:
          tinygo-version: "0.39.0"

      - name: Build reference skills
        run: make skills

      - name: Run unit tests
        run: go test ./...

      - name: Determine version
        id: meta
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "version=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            echo "version=snapshot-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build bundle
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ steps.meta.outputs.version }}
        run: |
          set -euo pipefail

          rm -rf dist

          BUNDLE_NAME="loqa-core_${VERSION}_${GOOS}_${GOARCH}"
          ROOT_DIR="dist/${BUNDLE_NAME}"
          BIN_DIR="${ROOT_DIR}/bin"
          mkdir -p "${BIN_DIR}" "${ROOT_DIR}/config" "${ROOT_DIR}/docs" "${ROOT_DIR}/skills"

          EXT=""
          if [ "$GOOS" = "windows" ]; then
            EXT=".exe"
          fi

          echo "Building loqad ${VERSION} for ${GOOS}/${GOARCH}"
          CGO_ENABLED=0 GOOS=${GOOS} GOARCH=${GOARCH} go build \
            -ldflags "-s -w -X main.version=${VERSION}" \
            -o "${BIN_DIR}/loqad${EXT}" \
            ./cmd/loqad

          echo "Building loqa-skill ${VERSION} for ${GOOS}/${GOARCH}"
          CGO_ENABLED=0 GOOS=${GOOS} GOARCH=${GOARCH} go build \
            -ldflags "-s -w -X main.version=${VERSION}" \
            -o "${BIN_DIR}/loqa-skill${EXT}" \
            ./cmd/loqa-skill

          cp LICENSE "${ROOT_DIR}/"
          cp README.md "${ROOT_DIR}/"
          cp docs/GETTING_STARTED.md "${ROOT_DIR}/docs/GETTING_STARTED.md"
          cp config/example.yaml "${ROOT_DIR}/config/example.yaml"

          mkdir -p "${ROOT_DIR}/skills/examples"
          cp -R skills/examples/timer "${ROOT_DIR}/skills/examples/timer"
          cp -R skills/examples/smart-home "${ROOT_DIR}/skills/examples/smart-home"

          tar -C dist -czf "dist/${BUNDLE_NAME}.tar.gz" "${BUNDLE_NAME}"
          sha256sum "dist/${BUNDLE_NAME}.tar.gz" | sed 's#  dist/#  #' > "dist/${BUNDLE_NAME}.tar.gz.sha256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            dist/loqa-core_${{ steps.meta.outputs.version }}_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz
            dist/loqa-core_${{ steps.meta.outputs.version }}_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz.sha256

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_type == 'tag'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
